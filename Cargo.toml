[package]
name = "SafeManuallyDrop"
version = "1.0.4"
authors = ["Denis Kotlyarov (Денис Котляров) <denis2005991@gmail.com>"]
repository = "https://github.com/clucompany/SafeManuallyDrop.git"
edition = "2021"

license = "Apache-2.0"
readme = "README.md"

description = "A safe version of ManuallyDrop with various features and options to track undefined behavior when working with ManuallyDrop."
keywords = ["safe_manually_drop", "safemanuallydrop", "SafeManuallyDrop", "no_std", "clucompany"]
categories = ["development-tools", "development-tools::testing", "development-tools::debugging", "api-bindings", "memory-management"]

# docs.rs-specific configuration
[package.metadata.docs.rs]
# document all features
all-features = true
# defines the configuration attribute `docsrs`
rustdoc-args = ["--cfg", "docsrs"]

[features]
default = [
	# Flags:
	#
	# ManuallyDrop and AutoManuallyDrop are always type safe and are automatically 
	# checked on use if the debug_assertions flag is enabled (the flag is automatically 
	# enabled if test build, debug build, or env: CARGO_PROFILE_RELEASE_DEBUG_ASSERTIONS=true).
	#
	# (Also, AlwaysSafeManuallyDrop is always checked for safety when it is used, regardless of the flags.)
	"always_check_in_case_debug_assertions", 
	
	# ManuallyDrop and AutoManuallyDrop are always checked when used, 
	# regardless of external flags.
	#
	# (Also, AlwaysSafeManuallyDrop is always checked for safety when it is used, regardless of the flags.)
	#"always_safe_manuallydrop",
	
	# Enable additional internal checks of the SafeManuallyDrop library when 
	# the debug_assertions flag is enabled (does not depend on the always_check_in_case_debug_assertions 
	# and always_safe_manuallydrop options). This flag type only applies to internal 
	# library function checks, it is independent of ManuallyDrop and its valid or invalid usage.
	#
	# "allow_fullinternal_debug_assertions",
	
	# Preserve unsafe fn flags even if functions are safe 
	# (may be required for additional compatibility with the standard API)
	"always_compatible_stdapi",
	
	# Always create a modular table of library flags used in the build.
	# (crate::core::flags)
	"always_build_flagstable",
	
	# Trigs:
	#
	# Ability to determine if an empty loop trigger has been executed.
	"support_istrig_loop",
	
	# Support for PanicManuallyDrop, in case of undefined behavior 
	# of ManuallyDrop there will be a panic.
	"support_panic_trig",
	
	# Support for AbortManuallyDrop, in case of undefined behavior 
	# of ManuallyDrop there will be a abort. (Note that this feature requires std.)
	#"support_abort_trig",
	
	# HookManuallyDrop support, in case of undefined HookManuallyDrop behavior, 
	# the hook function will be called.
	"support_hookfn_trig",
	
	# Support for CounterManuallyDrop, in case of undefined behavior, 
	# CounterManuallyDrop will add +1 to the counter.
	#"support_count_trig",
	
	# The behavior for the simple AutoSafeManuallyDrop/AlwaysSafeManuallyDrop/ManuallyDrop type will always 
	# cause a panic in case of undefined behavior.
	#"always_deftrig_panic",
	
	# The behavior for the simple AutoSafeManuallyDrop/AlwaysSafeManuallyDrop/ManuallyDrop type will always 
	# cause a abort in case of undefined behavior.
	#"always_deftrig_abort",
	
	# The behavior for the simple AutoSafeManuallyDrop/AlwaysSafeManuallyDrop/ManuallyDrop type will always 
	# call the hook function in case of undefined behavior.
	"always_deftrig_hookfn",
	
	# The behavior for the simple AutoSafeManuallyDrop/AlwaysSafeManuallyDrop/ManuallyDrop type will always call 
	# the +1 counter function in case of undefined behavior.
	#"always_deftrig_count",
	
	# The behavior for the simple type AutoSafeManuallyDrop/AlwaysSafeManuallyDrop/ManuallyDrop will always call 
	# the eternal loop function in case of undefined behavior.
	#"always_deftrig_loop"
]

# ManuallyDrop and AutoManuallyDrop are always type safe and are automatically 
# checked on use if the debug_assertions flag is enabled (the flag is automatically 
# enabled if test build, debug build, or env: CARGO_PROFILE_RELEASE_DEBUG_ASSERTIONS=true).
#
# (Also, AlwaysSafeManuallyDrop is always checked for safety when it is used, regardless of the flags.)
always_check_in_case_debug_assertions = []
# ManuallyDrop and AutoManuallyDrop are always checked when used, 
# regardless of external flags.
#
# (Also, AlwaysSafeManuallyDrop is always checked for safety when it is used, regardless of the flags.)
always_safe_manuallydrop = []

# Enable additional internal checks of the SafeManuallyDrop library when 
# the debug_assertions flag is enabled (does not depend on the always_check_in_case_debug_assertions 
# and always_safe_manuallydrop options). This flag type only applies to internal 
# library function checks, it is independent of ManuallyDrop and its valid or invalid usage.
allow_fullinternal_debug_assertions = []

# Always create a modular table of library flags used in the build.
# (crate::core::flags)
always_build_flagstable = []

support_hookfn_trig = []
# Support for CounterManuallyDrop, in case of undefined behavior, 
# CounterManuallyDrop will add +1 to the counter.
support_count_trig = []
# Support for AbortManuallyDrop, in case of undefined behavior 
# of ManuallyDrop there will be a abort. (Note that this feature requires std.)
support_abort_trig = []
# Support for PanicManuallyDrop, in case of undefined behavior 
# of ManuallyDrop there will be a panic.
support_panic_trig = []
# Ability to determine if an empty loop trigger has been executed.
support_istrig_loop = []

# Preserve unsafe fn flags even if functions are safe 
# (may be required for additional compatibility with the standard API)
always_compatible_stdapi = []

# The behavior for the simple AutoSafeManuallyDrop/AlwaysSafeManuallyDrop/ManuallyDrop type will always 
# cause a panic in case of undefined behavior.
always_deftrig_panic = []
# The behavior for the simple AutoSafeManuallyDrop/AlwaysSafeManuallyDrop/ManuallyDrop type will always 
# cause a abort in case of undefined behavior.
always_deftrig_abort = []
# The behavior for the simple AutoSafeManuallyDrop/AlwaysSafeManuallyDrop/ManuallyDrop type will always 
# call the hook function in case of undefined behavior.
always_deftrig_hookfn = []
# The behavior for the simple AutoSafeManuallyDrop/AlwaysSafeManuallyDrop/ManuallyDrop type will always call 
# the +1 counter function in case of undefined behavior.
always_deftrig_count = []
# The behavior for the simple type AutoSafeManuallyDrop/AlwaysSafeManuallyDrop/ManuallyDrop will always call 
# the eternal loop function in case of undefined behavior.
always_deftrig_loop = []

[dependencies]
